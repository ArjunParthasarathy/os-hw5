#!/usr/bin/env bpftrace
/*
 * This script records the task’s start time and the time it accumulates waiting in the runqueue.
 * When a task exits, it prints:
 *   - The accumulated runqueue waiting time in ms (RUNQ_MS) and
 *   - The total lifetime of the task in ms (TOTAL_MS).
 */

#include <stdio.h>
#include <stdlib.h>

#ifndef BPFTRACE_HAVE_BTF
  #include <linux/sched.h>
#else
  // With BTF we don’t need full headers – just define the values in use.
  #define TASK_RUNNING 0
#endif

BEGIN
{
  // Print header for CSV output.
  printf("COMM,PID,RUNQ_MS,TOTAL_MS\n");
}

// When a task is first woken up, record its fork time and initial runqueue time.
tracepoint:sched:sched_wakeup_new
{
  @stime[args.pid] = nsecs;
  @rqtime[args.pid] = nsecs;
  // Ensure the accumulator is initialized.
  @qtime[args.pid];
}

// For subsequent wakeups, update the runqueue entry time.
tracepoint:sched:sched_wakeup
{
  @rqtime[args.pid] = nsecs;
}

// At each scheduler switch:
//   - If the previous task was running (state == TASK_RUNNING), record its new runqueue entry.
//   - For the incoming task, accumulate the runqueue waiting time.
tracepoint:sched:sched_switch
{
  if (args.prev_state == TASK_RUNNING) {
    @rqtime[args.prev_pid] = nsecs;
  }
  @qtime[args.next_pid] += (nsecs - @rqtime[args.next_pid]);
}

// On process exit, calculate and print the times.
tracepoint:sched:sched_process_exit
{
  // Total time (from fork until exit) in milliseconds.
  $total_ms = (nsecs - @stime[args.pid]) / 1000000;
  // Runqueue waiting time (accumulated) in milliseconds.
  $rq_ms = @qtime[args.pid] / 1000000;

  if (@stime[args.pid] != 0) {
    printf("%s,%d,%d,%d\n", args.comm, args.pid, $rq_ms, $total_ms);
    // Clean up the per-PID data to avoid stale entries.
    delete(@stime[args.pid]);
    delete(@rqtime[args.pid]);
    delete(@qtime[args.pid]);
  }
}

END
{
  // Clean up global maps on exit.
  clear(@stime);
  clear(@rqtime);
  clear(@qtime);
}
